-- Ensure LazyVim is installed
-- git clone https://github.com/folke/lazy.nvim ~/.local/share/nvim/site/pack/packer/start/lazy.nvim

-- Init LazyVim
    -- LSP servers configuration
 return   {
        "neovim/nvim-lspconfig",
        config = function()
            local lspconfig = require('lspconfig')

            -- General LSP keybindings
            vim.api.nvim_set_keymap('n', 'gd', "<cmd>lua require('telescope.builtin').lsp_definitions({ reuse_win = false })<CR>", { noremap = true, silent = true, desc = "Goto Definition" })

            -- LSP server configurations
            lspconfig.cssls.setup({})
            lspconfig.tailwindcss.setup({
                root_dir = function(...)
                    return lspconfig.util.root_pattern(".git")(...)
                end,
            })
            lspconfig.tsserver.setup({
                root_dir = function(...)
                    return lspconfig.util.root_pattern(".git")(...)
                end,
                single_file_support = false,
                settings = {
                    typescript = {
                        inlayHints = {
                            includeInlayParameterNameHints = "literal",
                            includeInlayParameterNameHintsWhenArgumentMatchesName = false,
                            includeInlayFunctionParameterTypeHints = true,
                            includeInlayVariableTypeHints = false,
                            includeInlayPropertyDeclarationTypeHints = true,
                            includeInlayFunctionLikeReturnTypeHints = true,
                            includeInlayEnumMemberValueHints = true,
                        },
                    },
                    javascript = {
                        inlayHints = {
                            includeInlayParameterNameHints = "all",
                            includeInlayParameterNameHintsWhenArgumentMatchesName = false,
                            includeInlayFunctionParameterTypeHints = true,
                            includeInlayVariableTypeHints = true,
                            includeInlayPropertyDeclarationTypeHints = true,
                            includeInlayFunctionLikeReturnTypeHints = true,
                            includeInlayEnumMemberValueHints = true,
                        },
                    },
                },
            })
            lspconfig.html.setup({})
            lspconfig.yamlls.setup({
                settings = {
                    yaml = {
                        keyOrdering = false,
                    },
                },
            })
            lspconfig.lua_ls.setup({
                single_file_support = true,
                settings = {
                    Lua = {
                        workspace = {
                            checkThirdParty = false,
                        },
                        completion = {
                            workspaceWord = true,
                            callSnippet = "Both",
                        },
                        misc = {
                            parameters = {
                                -- "--log-level=trace",
                            },
                        },
                        hint = {
                            enable = true,
                            setType = false,
                            paramType = true,
                            paramName = "Disable",
                            semicolon = "Disable",
                            arrayIndex = "Disable",
                        },
                        doc = {
                            privateName = { "^_" },
                        },
                        type = {
                            castNumberToInteger = true,
                        },
                        diagnostics = {
                            disable = { "incomplete-signature-doc", "trailing-space" },
                            groupSeverity = {
                                strong = "Warning",
                                strict = "Warning",
                            },
                            groupFileStatus = {
                                ["ambiguity"] = "Opened",
                                ["await"] = "Opened",
                                ["codestyle"] = "None",
                                ["duplicate"] = "Opened",
                                ["global"] = "Opened",
                                ["luadoc"] = "Opened",
                                ["redefined"] = "Opened",
                                ["strict"] = "Opened",
                                ["strong"] = "Opened",
                                ["type-check"] = "Opened",
                                ["unbalanced"] = "Opened",
                                ["unused"] = "Opened",
                            },
                            unusedLocalExclude = { "_*" },
                        },
                        format = {
                            enable = false,
                            defaultConfig = {
                                indent_style = "space",
                                indent_size = "2",
                                continuation_indent_size = "2",
                            },
                        },
                    },
                },
            })
        end,
    }
